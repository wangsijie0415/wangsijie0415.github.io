<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[git的使用]]></title>
      <url>http://windback.xyz/2016/12/16/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Git连接github的详细使用"><a href="#Git连接github的详细使用" class="headerlink" title="Git连接github的详细使用"></a>Git连接github的详细使用</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>[git下载地址]： <a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a></p>
<p>当安装完git后，打开Git Bash客户端；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-204f665cde76e672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="配置和使用Github"><a href="#配置和使用Github" class="headerlink" title="配置和使用Github"></a>配置和使用Github</h3><h4 id="1-检查SSH-keys的设置"><a href="#1-检查SSH-keys的设置" class="headerlink" title="1.检查SSH keys的设置"></a>1.检查SSH keys的设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//检查本机的ssh密钥</div><div class="line">$ <span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure>
<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<h4 id="2-生成新的SSH-Key："><a href="#2-生成新的SSH-Key：" class="headerlink" title="2.生成新的SSH Key："></a>2.生成新的SSH Key：</h4><p>输入以下命令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址 "</span></div></pre></td></tr></table></figure></p>
<p>Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</p>
<p><strong>注意:</strong><br>    ①此处的邮箱地址，你可以输入自己的邮箱地址（你注册Github时候的邮箱）；<br>    ②此处的「-C」的是大写的C<br>然后系统会要你输入密码：<br>    Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>    Enter same passphrase again:&lt;再次输入加密串&gt;<br>此时直接输入密码就，输入完按回车，（密码字符不会显示*）</p>
<p>最后出现一个图是 方块并且里面有很多各种各样的符号分布即为成功设置ssh key了。</p>
<h4 id="3-添加SSH-Key到GitHub"><a href="#3-添加SSH-Key到GitHub" class="headerlink" title="3.添加SSH Key到GitHub"></a>3.添加SSH Key到GitHub</h4><p> 打开你的电脑 C:\Users\你电脑的 用户名.ssh文件 加即可看到生成的私人密钥。(若找不到.ssh文件，请设置显示隐藏文件)。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-19f4257756180543.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>登陆github系统。点击右上角的 头像 弹出菜单中 选择 Settings</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-7f282526f1c33315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>点击右侧 SSH and GPG  keys<br><img src="http://upload-images.jianshu.io/upload_images/3867823-c9f8953525757dd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>点击New  SSH key：添加一个title（自己定义），在key中填写C:\Users\你电脑的 用户名.ssh\id_rsa.pub文件中的密钥，点击Add SSH key即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-4248a2c48255f441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###测试<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果命令行反馈为：<br>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?<br>不要紧张，输入yes就好，然后会看到：<br>Hi cnfeat! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//用户名 </div><div class="line">$ git config --global user.name <span class="string">"cnfeat"</span></div><div class="line">//填写自己的邮箱(一个可用的邮箱即可，不一定非要github的注册邮箱)</div><div class="line">$ git config --global user.email <span class="string">"cnfeat@gmail.com"</span></div></pre></td></tr></table></figure></p>
<h2 id="Git命令行的详细使用"><a href="#Git命令行的详细使用" class="headerlink" title="Git命令行的详细使用"></a>Git命令行的详细使用</h2><h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git  常用命令"></a>Git  常用命令</h3><h4 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1.git init"></a>1.<strong>git init</strong></h4><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>
<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p>
<p><em>使用方法 ：</em><br>  在需要 生成仓库的文件夹右击选择 <strong>Git Bash Here</strong>，在命令行中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">``` </div><div class="line"></div><div class="line">该命令执行完后会在当前目录生成一个 .git 目录。</div><div class="line">使用我们指定目录作为Git仓库。</div><div class="line"></div><div class="line"><span class="comment">#### 2.**git clone**</span></div><div class="line">我们使用 **git <span class="built_in">clone</span>** 从现有 Git 仓库中拷贝项目</div><div class="line"></div><div class="line">*使用方法：*</div><div class="line">克隆远程仓库到本目录下的</div><div class="line">``` bash</div><div class="line">$ git <span class="built_in">clone</span> &lt;repo&gt;</div></pre></td></tr></table></figure></p>
<p>克隆远程仓库到指定目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure></p>
<p>注：<br>  <strong>repo:</strong>Git 仓库。<br>  <strong>directory:</strong>本地目录。<br>  <strong>&lt;&gt;为标注、实际情况不带,以下情况均是&lt;&gt;</strong></p>
<p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:wangsijie0415:CarSeatTable-master.git</div></pre></td></tr></table></figure></p>
<h4 id="3-git-add"><a href="#3-git-add" class="headerlink" title="3.git add"></a>3.<strong>git add</strong></h4><p>我们可以使用 <strong> git add .</strong> 命令来添加当前项目的所有文件到缓存区<br>添加个别文件则<strong> git add  xxx.文件后缀</strong> 多个文件可用 “空格” 隔开.</p>
<p><em>使用方法：</em><br>添加多个文件至缓存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add &lt;文件.文件后缀&gt; &lt;文件.文件后缀&gt;</div></pre></td></tr></table></figure></p>
<p>添加本目录全部文件到缓存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">//或者</div><div class="line">$ git add -A</div></pre></td></tr></table></figure></p>
<h4 id="4-git-commit"><a href="#4-git-commit" class="headerlink" title="4.git commit"></a>4.<strong>git commit</strong></h4><p>使用 <strong>git add </strong>命令将想要快照的内容写入缓存区， 而执行 <strong>git commit </strong>将缓存区内容添加到本地仓库中。</p>
<p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 <strong>git commit -a </strong>选项跳过这一步</p>
<p><em>使用方法：</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit</div></pre></td></tr></table></figure></p>
<p>带消息的提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$  git commit -m <span class="string">"需要提交的信息"</span></div><div class="line">``` </div><div class="line">合并add 和 commit 步骤：</div><div class="line"></div><div class="line">``` bash</div><div class="line">$ git commit <span class="_">-a</span> </div><div class="line">//带提交信息的</div><div class="line">$ git commit -am <span class="string">''</span>需要提交的信息<span class="string">"</span></div></pre></td></tr></table></figure></p>
<h4 id="5-git-pull"><a href="#5-git-pull" class="headerlink" title="5.git pull"></a>5.<strong>git pull</strong></h4><p>更新远程仓库到本地，若已在本地仓库，在我们提交更改之前，在团队开发的过程中我们应保证代码的一致性，所以在提交前我们应该先将远程仓库的代码使用<strong>git pull</strong>更新下来。<br><em>使用方法：</em><br>取回远程主机某个分支的更新，再与本地的指定分支合并。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div></pre></td></tr></table></figure></p>
<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull  &lt;远程主机名&gt; &lt;远程分支名&gt;</div></pre></td></tr></table></figure></p>
<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin</div></pre></td></tr></table></figure></p>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<h4 id="6-git-push"><a href="#6-git-push" class="headerlink" title="6.git push"></a>6.<strong>git push</strong></h4><p>用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<p><em>使用方法：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div></pre></td></tr></table></figure>
<p>注意：分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<h3 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git  分支管理"></a>Git  分支管理</h3><h4 id="0-列出-所有分支"><a href="#0-列出-所有分支" class="headerlink" title="0.列出 所有分支"></a>0.列出 所有分支</h4><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<h4 id="1-新建本地分支"><a href="#1-新建本地分支" class="headerlink" title="1.新建本地分支"></a>1.新建本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="2-切换本地分支"><a href="#2-切换本地分支" class="headerlink" title="2.切换本地分支"></a>2.切换本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge</div></pre></td></tr></table></figure>
<h4 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4.删除分支"></a>4.删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="5-创建并切换分支"><a href="#5-创建并切换分支" class="headerlink" title="5.创建并切换分支"></a>5.创建并切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="6-推送分支到远程仓库"><a href="#6-推送分支到远程仓库" class="headerlink" title="6.推送分支到远程仓库"></a>6.推送分支到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin local_branch:remote_branch</div></pre></td></tr></table></figure>
<p>注：<br>local_branch必须为你本地存在的分支，remote_branch为远程分支，如果remote_branch不存在则会自动创建分支。</p>
<h4 id="7-删除远程分支"><a href="#7-删除远程分支" class="headerlink" title="7.删除远程分支"></a>7.删除远程分支</h4><p>即把local_branch留空则是删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :remote_branch</div></pre></td></tr></table></figure></p>
<h4 id="8-创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔"><a href="#8-创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔" class="headerlink" title="8.创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)"></a>8.创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//创建一个branchname的分支 --orphan指的是你执行git checkout命令时的那个分支，当然新的分支不会指向任何以前的提交。</div><div class="line">$ git checkout --orphan &lt;branchname&gt;</div><div class="line">//把当前内容全部删除</div><div class="line">$ git rm -rf .</div><div class="line">//使用commit命令来提交空分支</div><div class="line">$ git commit -am <span class="string">"消息"</span></div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://windback.xyz/2016/12/13/hello-world/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</the></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
