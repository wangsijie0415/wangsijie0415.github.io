<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[DataBinding的初识]]></title>
      <url>http://windback.xyz/2017/03/01/DataBinding/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>   Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，<br>   在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。</p>
<p>   Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，<br>   有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。</p>
<p>   Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。</p>
<p>   Data Binding 之前，我们不可避免地要编写大量的毫无营养的代码，<br>   如 findViewById()、setText()，setVisibility()，setEnabled() 或 setOnClickListener() 等，<br>   通过 Data Binding , 我们可以通过声明式布局以精简的代码来绑定应用程序逻辑和布局，<br>   这样就不用编写大量的毫无营养的代码了。</p>
<h1 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h1><p>首先，确保能使用Data Binding，需要下载最新的 Support repository。否则可能报错，如图：</p>
<p>在模块的build.gradle文件中添加dataBinding配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ....</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>    如果app依赖了一个使用 Data Binding 的库，那么app module 的 build.gradle 也必须配置 Data Binding。</p>
<pre><code>Data Binding 布局文件 - (View)
Data binding 的布局文件与传统布局文件有一点不同。它以一个 layout 标签作为根节点，
里面是 data 标签与 view 标签。view 标签的内容就是不使用 Data Binding 时的普通布局文件内容。以下是一个例子：
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">        &lt;!-- 变量user， 描述了一个布局中会用到的属性 --&gt;</div><div class="line">       &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line"></div><div class="line">   &lt;LinearLayout</div><div class="line">       android:orientation=<span class="string">"vertical"</span></div><div class="line">       android:layout_width=<span class="string">"match_parent"</span></div><div class="line">       android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">       &lt;TextView android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">           android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">           android:text=<span class="string">"@&#123;user.firstName&#125;"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 布局文件中的表达式使用 “@&#123;&#125;” 的语法 --&gt;</div><div class="line">       &lt;TextView android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">           android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">           android:text=<span class="string">"@&#123;user.lastName&#125;"</span>/&gt;</div><div class="line">   &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<h2 id="数据对象-Model"><a href="#数据对象-Model" class="headerlink" title="数据对象 - (Model)"></a>数据对象 - (Model)</h2><p>假设你有一个 plain-old Java object(POJO) 的 User 对象。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">   private final String mFirstName;</div><div class="line">    private final String mLastName;</div><div class="line">    private int mAge;</div><div class="line"></div><div class="line">    public User(String firstName, String lastName, int age) &#123;</div><div class="line">        mFirstName = firstName;</div><div class="line">        mLastName = lastName;</div><div class="line">        mAge = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者是 JavaBean 对象：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">   private final String mFirstName;</div><div class="line">    private final String mLastName;</div><div class="line">    private int mAge;</div><div class="line"></div><div class="line">    public User(String firstName, String lastName, int age) &#123;</div><div class="line">        mFirstName = firstName;</div><div class="line">        mLastName = lastName;</div><div class="line">        mAge = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getFirstName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mFirstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getLastName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mLastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int <span class="function"><span class="title">getAge</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mAge;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   从 Data Binding 的角度看，这两个类是一样的。用于 TextView 的<br>   android:text 属性的表达式@{user.firstName}，会读取 POJO 对象的 firstName 字段以及<br>   JavaBeans 对象的 getFirstName()方法。</p>
<h2 id="绑定数据-ViewModel"><a href="#绑定数据-ViewModel" class="headerlink" title="绑定数据 - (ViewModel)"></a>绑定数据 - (ViewModel)</h2><p>   在默认情况下，会基于布局文件生成一个继承于 ViewDataBinding 的 Binding 类，<br>   将它转换成帕斯卡命名并在名字后面接上Binding。例如，布局文件叫 main_activity.xml，<br>   所以会生成一个 MainActivityBinding 类。这个类包含了布局文件中所有的绑定关系，会根据绑定表达式给布局文件赋值。<br>   在 inflate 的时候创建 binding 的方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">   super.onCreate(savedInstanceState);</div><div class="line">   </div><div class="line">   //  ActivityBaseBinding 类是自动生成的</div><div class="line">   ActivityBaseBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_base);</div><div class="line">   User user = new User(<span class="string">"Connor"</span>, <span class="string">"Lin"</span>);</div><div class="line">   // 所有的 <span class="built_in">set</span> 方法也是根据布局中 variable 名称生成的</div><div class="line">   binding.setUser(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>本部分源码请参考 DataBindingDemo -&gt; EventActivity 部分。</p>
<p>类似于 android:onClick 可以指定 Activity 中的函数，Data Binding 也允许处理从视图中发送的事件。</p>
<p>有两种实现方式：<br>  方法调用监听绑定<br>二者主要区别在于方法调用在编译时处理，而监听绑定于事件发生时处理。</p>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>相较于 android:onClick ，它的优势在于表达式会在编译时处理，如果函数不存在或者函数签名不对，编译将会报错。</p>
<p>以下是个例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    private Context mContext;</div><div class="line">    public EventHandler(Context context) &#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onClickFriend(View view) &#123;</div><div class="line">        Toast.makeText(mContext, <span class="string">"onClickFriend"</span>, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表达式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">    &lt;data&gt;</div><div class="line">        &lt;variable</div><div class="line">            name=<span class="string">"handler"</span></div><div class="line">            <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.handler.EventHandler"</span>/&gt;</div><div class="line">    &lt;/data&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span></div><div class="line">        android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:onClick=<span class="string">"@&#123;handler::onClickFriend&#125;"</span>/&gt;</div><div class="line">        &lt;!-- 注意：函数名和监听器对象必须对应 --&gt;</div><div class="line">        &lt;!-- 函数调用也可以使用 `.` , 如handler.onClickFriend , 不过已弃用 --&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<h3 id="监听绑定"><a href="#监听绑定" class="headerlink" title="监听绑定"></a>监听绑定</h3><p>监听绑定在事件发生时调用，可以使用任意表达式</p>
<p>此功能在 Android Gradle Plugin version 2.0 或更新版本上可用.</p>
<p>在方法引用中，方法的参数必须与监听器对象的参数相匹配。在监听绑定中，<br>只要返回值与监听器对象的预期返回值相匹配即可。</p>
<p>以下是个例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void onTaskClick(Task task) &#123;</div><div class="line">    task.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表达式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">  &lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">      &lt;data&gt;</div><div class="line">          &lt;variable</div><div class="line">            name=<span class="string">"handler"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.handler.EventHandler"</span>/&gt;</div><div class="line">        &lt;variable</div><div class="line">            name=<span class="string">"task"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.task.Task"</span>/&gt;</div><div class="line">      &lt;/data&gt;</div><div class="line"></div><div class="line">      &lt;LinearLayout </div><div class="line">        android:layout_width=<span class="string">"match_parent"</span> </div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line">          &lt;Button</div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:onClick=<span class="string">"@&#123;() -&gt; handler.onTaskClick(task)&#125;"</span>/&gt;</div><div class="line">      &lt;/LinearLayout&gt;</div><div class="line">  &lt;/layout&gt;</div></pre></td></tr></table></figure>
<p>  当一个回调函数在表达式中使用时，数据绑定会自动为事件创建必要的监听器并注册监听。</p>
<h4 id="关于参数"><a href="#关于参数" class="headerlink" title="关于参数"></a>关于参数</h4><p>参数有两种选择：要么不写，要么就要写全。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button </div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:onClick=<span class="string">"@&#123;() -&gt; handler.onTaskClick(task)&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button </div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:onClick=<span class="string">"@&#123;(view) -&gt; handler.onTaskClick(task)&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<p>lambda 表达式可添加一个或多个参数，同时参数可任意命名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    public void onTaskClickWithParams(View view, Task task) &#123;</div><div class="line">        task.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button </div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:onClick=<span class="string">"@&#123;(theview) -&gt; handler.onTaskClickWithParams(theview, task)&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    public void onCompletedChanged(Task task, boolean completed) &#123;</div><div class="line">        <span class="keyword">if</span>(completed) &#123;</div><div class="line">            task.run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;CheckBox </div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span> </div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:onCheckedChanged=<span class="string">"@&#123;(cb, isChecked) -&gt; handler.onCompletedChanged(task, isChecked)&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>表达式结果有默认值 null、0、false等等</p>
<p>表达式中可以使用void</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button </div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:onClick=<span class="string">"@&#123;(v) -&gt; v.isVisible() ? doSomething() : void&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="关于表达式"><a href="#关于表达式" class="headerlink" title="关于表达式"></a>关于表达式</h4><p>复杂的表达式会使布局难以阅读和维护，这种情况我们最好将业务逻辑写到回调函数中</p>
<p>也有一些特殊的点击事件 我们需要使用不同于 android:onClick 的属性来避免冲突。</p>
<p>下面是一些用来避免冲突的属性：</p>
<p>Class    Listener Setter    Attribute<br>SearchView    setOnSearchClickListener(View.OnClickListener)    android:onSearchClick<br>ZoomControls    setOnZoomInClickListener(View.OnClickListener)    android:onZoomIn<br>ZoomControls    setOnZoomOutClickListener(View.OnClickListener)    android:onZoomOut</p>
<h1 id="布局详情"><a href="#布局详情" class="headerlink" title="布局详情"></a>布局详情</h1><p>本部分源码请参考 DataBindingDemo -&gt; CombineActivity 部分</p>
<h2 id="导入-Imports"><a href="#导入-Imports" class="headerlink" title="导入(Imports)"></a>导入(Imports)</h2><p>data 标签内可以有多个 import 标签。你可以在布局文件中像使用 Java 一样导入引用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.view.View"</span>/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">   android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">   android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">   android:visibility=<span class="string">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<p>当类名发生冲突时，可以使用 alias</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;import <span class="built_in">type</span>=<span class="string">"android.view.View"</span>/&gt;</div><div class="line">&lt;import <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.ui.View"</span> <span class="built_in">alias</span>=<span class="string">"AliasView"</span>/&gt;</div></pre></td></tr></table></figure>
<p>导入的类型也可以用于变量的类型引用和表达式中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"java.util.List"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"User"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"userList"</span> <span class="built_in">type</span>=<span class="string">"List&lt;User&gt;"</span>/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<p>注意：Android Studio 还没有对导入提供自动补全的支持。你的应用还是可以被正常编译，要解决这个问题，<br>你可以在变量定义中使用完整的包名。</p>
<p>导入也可以用于在表达式中使用静态方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MyStringUtils &#123;</div><div class="line">    public static String capitalize(final String word) &#123;</div><div class="line">        <span class="keyword">if</span> (word.length() &gt; 1) &#123;</div><div class="line">            <span class="built_in">return</span> String.valueOf(word.charAt(0)).toUpperCase() + word.substring(1);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> word;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.utils.MyStringUtils"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">   android:text=<span class="string">"@&#123;MyStringUtils.capitalize(user.lastName)&#125;"</span></div><div class="line">   android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">   android:layout_height=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>java.lang.* 包中的类会被自动导入，可以直接使用，例如， 要定义一个 String 类型的变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;variable name=<span class="string">"test"</span> <span class="built_in">type</span>=<span class="string">"String"</span> /&gt;</div></pre></td></tr></table></figure>
<h2 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 Variables"></a>变量 Variables</h2><p>data 标签中可以有任意数量的 variable 标签。每个 variable 标签描述了会在 binding 表达式中使用的属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.graphics.drawable.Drawable"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span>  <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"image"</span> <span class="built_in">type</span>=<span class="string">"Drawable"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"note"</span>  <span class="built_in">type</span>=<span class="string">"String"</span>/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<p>可以在表达式中直接引用带 id 的 view，引用时采用驼峰命名法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:id=<span class="string">"@+id/first_name"</span></div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">"@=&#123;user.firstName&#125;"</span> /&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:text=<span class="string">"@&#123;user.lastName&#125;"</span></div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:visibility=<span class="string">"@&#123;firstName.getVisibility() == View.GONE ? View.GONE : View.VISIBLE&#125;"</span> /&gt;</div><div class="line">    &lt;!-- 这里TextView直接引用第一次TextView，firstName为id 的驼峰命名 --&gt;</div></pre></td></tr></table></figure>
<p>binding 类会生成一个命名为 context 的特殊变量(其实就是 rootView 的 getContext() ) 的返回值)，<br>这个变量可用于表达式中。 如果有名为 context 的变量存在，那么生成的这个 context 特殊变量将被覆盖。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">"@&#123;handler.loadString(context)&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public String loadString(Context context) &#123;</div><div class="line">    // 使用生成的context变量</div><div class="line">    <span class="built_in">return</span> context.getResources().getString(R.string.string_from_context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义绑定类名"><a href="#自定义绑定类名" class="headerlink" title="自定义绑定类名"></a>自定义绑定类名</h2><p>默认情况下，binding 类的名称取决于布局文件的命名，以大写字母开头，移除下划线，<br>后续字母大写并追加 “Binding” 结尾。这个类会被放置在 databinding 包中。举个例子，<br>布局文件 contact_item.xml 会生成 ContactItemBinding 类。<br>如果 module 包名为 com.example.my.app ，binding 类会被放在 com.example.my.app.databinding 中。</p>
<p>通过修改 data 标签中的 class 属性，可以修改 Binding 类的命名与位置。举个例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;data class=<span class="string">"CustomBinding"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<p>以上会在 databinding 包中生成名为 CustomBinding 的 binding 类。如果需要放置在不同的包下，可以在前面加 “.”：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;data class=<span class="string">".CustomBinding"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<p>这样的话， CustomBinding 会直接生成在 module 包下。如果提供完整的包名，binding 类可以放置在任何包名中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;data class=<span class="string">"com.example.CustomBinding"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">        xmlns:<span class="built_in">bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">       &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line">   &lt;LinearLayout</div><div class="line">       android:orientation=<span class="string">"vertical"</span></div><div class="line">       android:layout_width=<span class="string">"match_parent"</span></div><div class="line">       android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line">       &lt;include layout=<span class="string">"@layout/include"</span></div><div class="line">            app:user=<span class="string">"@&#123;user&#125;"</span>/&gt;</div><div class="line">   &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<p>需要注意， activity_combine.xml 与 include.xml 中都需要声明 user 变量。</p>
<p>Data binding 不支持直接包含 merge 节点。举个例子， 以下的代码不能正常运行 ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">        xmlns:<span class="built_in">bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">       &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line">   &lt;merge&gt;</div><div class="line">       &lt;include layout=<span class="string">"@layout/include"</span></div><div class="line">            app:user=<span class="string">"@&#123;user&#125;"</span>/&gt;</div><div class="line">   &lt;/merge&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<h2 id="表达式语言"><a href="#表达式语言" class="headerlink" title="表达式语言"></a>表达式语言</h2><h3 id="通用特性"><a href="#通用特性" class="headerlink" title="通用特性"></a>通用特性</h3><p>表达式语言与 Java 表达式有很多相似之处。下面是相同之处：</p>
<p>数学计算 + - / * %<br>字符串连接 +<br>逻辑 &amp;&amp; ||<br>二进制 &amp; | ^<br>一元 + - ! ~<br>位移 &gt;&gt; &gt;&gt;&gt; &lt;&lt;<br>比较 == &gt; &lt; &gt;= &lt;=<br>instanceof<br>组 ()<br>字面量 - 字符，字符串，数字， null<br>类型转换<br>函数调用<br>字段存取<br>数组存取 []<br>三元运算符 ?：</p>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 内部使用字符串 &amp; 字符拼接--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">"@&#123;`Age :` + String.valueOf(user.age)&#125;"</span>/&gt;</div><div class="line"></div><div class="line">&lt;!-- 三目运算--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:visibility=<span class="string">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在xml中转义是不可避免的，如 : 使用“&amp;&amp;”是编译不通过的，需要使用转义字符 “&amp;&amp;”</p>
<p>附：常用的转义字符</p>
<table>
<thead>
<tr>
<th>显示结果</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">转义字符</th>
<th style="text-align:right">十进制</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td style="text-align:center">空格</td>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:right">&#160;</td>
</tr>
<tr>
<td>&lt;</td>
<td style="text-align:center">小于号</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:right">&#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td style="text-align:center">大于号</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:right">&#62;</td>
</tr>
<tr>
<td>&amp;</td>
<td style="text-align:center">与号</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:right">&#38;</td>
</tr>
<tr>
<td>“</td>
<td style="text-align:center">引号</td>
<td style="text-align:center">&quot;</td>
<td style="text-align:right">&#34;</td>
</tr>
<tr>
<td>‘</td>
<td style="text-align:center">撇号</td>
<td style="text-align:center">&apos;</td>
<td style="text-align:right">&#39;</td>
</tr>
<tr>
<td>×</td>
<td style="text-align:center">乘号</td>
<td style="text-align:center">&times;</td>
<td style="text-align:right">&#215;</td>
</tr>
<tr>
<td>÷</td>
<td style="text-align:center">除号</td>
<td style="text-align:center">&divide;</td>
<td style="text-align:right">&#247;</td>
</tr>
</tbody>
</table>
<h3 id="不支持的操作符"><a href="#不支持的操作符" class="headerlink" title="不支持的操作符"></a>不支持的操作符</h3><p>一些 Java 中的操作符在表达式语法中不能使用。</p>
<p>this<br>super<br>new<br>显式泛型调用 <t></t></p>
<p>###Null合并运算符</p>
<p>Null合并运算符 ?? 会在非 null 的时候选择左边的操作，反之选择右边。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;user.lastName ?? `Default LastName`&#125;"</span></div></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;user.lastName != null ? user.lastName : `Default LastName`&#125;"</span></div></pre></td></tr></table></figure>
<p>容器类</p>
<p>通用的容器类：数组，lists，sparse lists，和 maps，可以用 [] 操作符来存取</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.util.SparseArray"</span>/&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"java.util.Map"</span>/&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"java.util.List"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"list"</span> <span class="built_in">type</span>=<span class="string">"List&lt;String&gt;"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"sparse"</span> <span class="built_in">type</span>=<span class="string">"SparseArray&lt;String&gt;"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"map"</span> <span class="built_in">type</span>=<span class="string">"Map&lt;String, String&gt;"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"index"</span> <span class="built_in">type</span>=<span class="string">"int"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"key"</span> <span class="built_in">type</span>=<span class="string">"String"</span>/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">android:text=<span class="string">"@&#123;list[index]&#125;"</span></div><div class="line">…</div><div class="line">android:text=<span class="string">"@&#123;sparse[index]&#125;"</span></div><div class="line">…</div><div class="line">android:text=<span class="string">"@&#123;map[key]&#125;"</span></div></pre></td></tr></table></figure>
<h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>使用单引号把属性包起来，就可以很简单地在表达式中使用双引号：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">'@&#123;map["firstName"]&#125;'</span></div></pre></td></tr></table></figure>
<p>也可以用双引号将属性包起来。这样的话，字符串常量就可以用 “ 或者反引号 ( ` ) 来调用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;map[`firstName`&#125;"</span></div><div class="line">android:text=<span class="string">"@&#123;map[&amp;quot;firstName&amp;quot;]&#125;"</span></div></pre></td></tr></table></figure>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>也可以在表达式中使用普通的语法来引用资源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;@string/fullname(user.fullName)"</span></div></pre></td></tr></table></figure>
<p>字符串格式化和复数形式可以这样实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;@plurals/sample_plurals(num)&#125;"</span></div></pre></td></tr></table></figure>
<p>当复数形式有多个参数时，应该这样写：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">"@&#123;@plurals/numbers(num, num)&#125;"</span></div></pre></td></tr></table></figure>
<p>一些资源需要显示类型调用。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th style="text-align:center">Normal Reference</th>
<th style="text-align:right">Expression Reference</th>
</tr>
</thead>
<tbody>
<tr>
<td>String[]</td>
<td style="text-align:center">@array</td>
<td style="text-align:right">@stringArray</td>
</tr>
<tr>
<td>int[]</td>
<td style="text-align:center">@array</td>
<td style="text-align:right">@intArray</td>
</tr>
<tr>
<td>TypedArray</td>
<td style="text-align:center">@array</td>
<td style="text-align:right">@typedArray</td>
</tr>
<tr>
<td>Animator</td>
<td style="text-align:center">@animator</td>
<td style="text-align:right">@animator</td>
</tr>
<tr>
<td>StateListAnimator</td>
<td style="text-align:center">@animator</td>
<td style="text-align:right">@stateListAnimator</td>
</tr>
<tr>
<td>color int</td>
<td style="text-align:center">@color</td>
<td style="text-align:right">@color</td>
</tr>
<tr>
<td>ColorStateList</td>
<td style="text-align:center">@color</td>
<td style="text-align:right">@colorStateList</td>
</tr>
</tbody>
</table>
<h1 id="数据对象-Data-Objects"><a href="#数据对象-Data-Objects" class="headerlink" title="数据对象 (Data Objects)"></a>数据对象 (Data Objects)</h1><p>任何 POJO 对象都能用在 Data Binding 中，但是更改 POJO 并不会同步更新 UI。Data Binding<br>的强大之处就在于它可以让你的数据拥有更新通知的能力。</p>
<p>有三种不同的动态更新数据的机制：</p>
<p> .Observable 对象<br> .Observable 字段<br> .Observable 容器类</p>
<p>当以上的 observable 对象绑定在 UI 上，数据发生变化时，UI 就会同步更新。</p>
<h2 id="Observable-对象"><a href="#Observable-对象" class="headerlink" title="Observable 对象"></a>Observable 对象</h2><p>当一个类实现了 Observable 接口时，Data Binding 会设置一个 listener 在绑定的对象上，以便监听对象字段的变动。</p>
<p>Observable 接口有一个添加/移除 listener 的机制，但通知取决于开发者。<br>为了简化开发，Android 原生提供了一个基类 BaseObservable 来实现 listener 注册机制。<br>这个类也实现了字段变动的通知，只需要在 getter 上使用 Bindable 注解，并在 setter 中通知更新即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class ObservableContact extends BaseObservable &#123;</div><div class="line">    private String mName;</div><div class="line">    private String mPhone;</div><div class="line"></div><div class="line">    public ObservableContact(String name, String phone) &#123;</div><div class="line">        mName = name;</div><div class="line">        mPhone = phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">        mName = name;</div><div class="line">        notifyPropertyChanged(BR.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String <span class="function"><span class="title">getPhone</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Phone(String phone) &#123;</div><div class="line">        mPhone = phone;</div><div class="line">        notifyPropertyChanged(BR.phone);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BR 是编译阶段生成的一个类，功能与 R.java 类似，用 @Bindable 标记过 getter 方法会在 BR 中生成一个 entry。<br>当数据发生变化时需要调用 notifyPropertyChanged(BR.firstName) 通知系统 BR.firstName<br>这个 entry 的数据已经发生变化以更新UI。</p>
<h2 id="ObservableFields"><a href="#ObservableFields" class="headerlink" title="ObservableFields"></a>ObservableFields</h2><p>创建 Observable 类还是需要花费一点时间的，如果想要省时，或者数据类的字段很少的话，<br>可以使用 ObservableField 以及它的派生 ObservableBoolean、<br>ObservableByte 、ObservableChar、ObservableShort、ObservableInt、ObservableLong、ObservableFloat、<br>ObservableDouble、ObservableParcelable 。</p>
<p>ObservableFields 是包含 observable 对象的单一字段。原始版本避免了在存取过程中做打包/解包操作。<br>要使用它，在数据类中创建一个 public final 字段：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ObservableFieldContact &#123;</div><div class="line">    public ObservableField&lt;String&gt; mName = new ObservableField&lt;&gt;();</div><div class="line">    public ObservableField&lt;String&gt; mPhone = new ObservableField&lt;&gt;();</div><div class="line"></div><div class="line">    public ObservableFieldContact(String name, String phone) &#123;</div><div class="line">        mName.set(name);</div><div class="line">        mPhone.set(phone);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要存取数据，只需要使用 get() / set() 方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mObservableFieldContact.mName.set(<span class="string">"ConnorLin"</span>);</div><div class="line">mObservableFieldContact.mPhone.set(<span class="string">"12345678901"</span>);</div><div class="line"></div><div class="line">String name = mObservableFieldContact.mName.get();</div></pre></td></tr></table></figure>
<h2 id="Observable-Collections-容器类"><a href="#Observable-Collections-容器类" class="headerlink" title="Observable Collections 容器类"></a>Observable Collections 容器类</h2><p>一些应用会使用更加灵活的结构来保持数据。Observable 容器类允许使用 key 来获取这类数据。<br>当 key 是类似 String 的一类引用类型时，使用 ObservableArrayMap 会非常方便。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObservableArrayMap&lt;String, String&gt; mUser = new ObservableArrayMap&lt;&gt;();</div><div class="line">mUser.put(<span class="string">"firstName"</span>, <span class="string">"Connor"</span>);</div><div class="line">mUser.put(<span class="string">"lastName"</span>, <span class="string">"Lin"</span>);</div><div class="line">mUser.put(<span class="string">"age"</span>, <span class="string">"28"</span>);</div><div class="line">mBinding.setUser(mUser);</div></pre></td></tr></table></figure>
<p>在布局中，可以用 String key 来获取 map 中的数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.databinding.ObservableMap"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"ObservableMap&amp;lt;String, String&gt;"</span>/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;user["firstName"]&#125;'</span>/&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;user["lastName"]&#125;'</span>/&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;user["age"]&#125;'</span>/&gt;</div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">当 key 是整数类型时，可以使用 ObservableArrayList ：</div><div class="line"></div><div class="line">``` bash</div><div class="line">ObservableArrayList&lt;String&gt; user = new ObservableArrayList&lt;&gt;();</div><div class="line">user.add(<span class="string">"Google"</span>);</div><div class="line">user.add(<span class="string">"Inc."</span>);</div><div class="line">user.add(<span class="string">"17"</span>);</div></pre></td></tr></table></figure>
<p>在布局文件中，使用下标获取列表数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.databinding.ObservableList"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"ObservableList&lt;String&gt;"</span>/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;userList[0]&#125;'</span>/&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;userList[1]&#125;'</span>/&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">'@&#123;userList[2]&#125;'</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="生成绑定"><a href="#生成绑定" class="headerlink" title="生成绑定"></a>生成绑定</h1><p>生成的 binding 类将布局中的 View 与变量绑定在一起。就像先前提到过的，类名和包名可以自定义 。<br>生成的 binding 类会继承 ViewDataBinding 。</p>
<p>##Creating</p>
<p>binding 应该在 inflate 之后创建，确保 View 的层次结构不会在绑定前被干扰。绑定布局有好几种方式。最常见的是使用 binding 类中的静态方法。inflate 函数会 inflate View 并将 View 绑定到 binding 类上。此外有更加简单的函数，只需要一个 LayoutInflater 或一个 ViewGroup：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflater);</div><div class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflater, viewGroup, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>如果布局使用不同的机制来 inflate，则可以独立做绑定操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);</div></pre></td></tr></table></figure>
<p>有时绑定关系是不能提前确定的。这种情况下，可以使用 DataBindingUtil ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId, parent, attachToParent);</div><div class="line">ViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);</div></pre></td></tr></table></figure>
<h2 id="Views-With-IDs"><a href="#Views-With-IDs" class="headerlink" title="Views With IDs"></a>Views With IDs</h2><p>布局中每一个带有 ID 的 View，都会生成一个 public final 字段。binding 过程会做一个简单的赋值，在 binding 类中保存对应 ID 的 View。这种机制相比调用 findViewById 效率更高。举个例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">       &lt;variable name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line">   &lt;LinearLayout</div><div class="line">       android:orientation=<span class="string">"vertical"</span></div><div class="line">       android:layout_width=<span class="string">"match_parent"</span></div><div class="line">       android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line">       &lt;TextView android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">           android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">           android:text=<span class="string">"@&#123;user.firstName&#125;"</span></div><div class="line">           android:id=<span class="string">"@+id/firstName"</span>/&gt;</div><div class="line">       &lt;TextView android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">           android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">           android:text=<span class="string">"@&#123;user.lastName&#125;"</span></div><div class="line">           android:id=<span class="string">"@+id/lastName"</span>/&gt;</div><div class="line">   &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<p>将会在 binding 类内生成：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public final TextView firstName;</div><div class="line">public final TextView lastName;</div></pre></td></tr></table></figure>
<p>ID 在 Data Binding 中并不是必需的，但是在某些情况下还是有必要对 View 进行操作。</p>
<p>##Variables</p>
<p>每一个变量会有相应的存取函数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import <span class="built_in">type</span>=<span class="string">"android.graphics.drawable.Drawable"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"user"</span>  <span class="built_in">type</span>=<span class="string">"com.connorlin.databinding.model.User"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"image"</span> <span class="built_in">type</span>=<span class="string">"Drawable"</span>/&gt;</div><div class="line">    &lt;variable name=<span class="string">"note"</span>  <span class="built_in">type</span>=<span class="string">"String"</span>/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
<p>并在 binding 类中生成对应的 getters 和 setters：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public com.connorlin.databinding.model.User getUser();</div><div class="line">public void <span class="built_in">set</span>User(com.connorlin.databinding.model.User user);</div><div class="line">public Drawable getImage();</div><div class="line">public void <span class="built_in">set</span>Image(Drawable image);</div><div class="line">public String getNote();</div><div class="line">public void <span class="built_in">set</span>Note(String note);</div></pre></td></tr></table></figure>
<h2 id="ViewStubs"><a href="#ViewStubs" class="headerlink" title="ViewStubs"></a>ViewStubs</h2><p>本部分源码请参考 DataBindingDemo -&gt; ViewStubActivity 部分。</p>
<p>ViewStub 相比普通 View 有一些不同。ViewStub 一开始是不可见的，当它们被设置为可见，或者调用 inflate 方法时，ViewStub 会被替换成另外一个布局。</p>
<p>因为 ViewStub 实际上不存在于 View 结构中，binding 类中的类也得移除掉，以便系统回收。因为 binding 类中的 View 都是 final 的，所以Android 提供了一个叫 ViewStubProxy 的类来代替 ViewStub 。开发者可以使用它来操作 ViewStub，获取 ViewStub inflate 时得到的视图。</p>
<p>但 inflate 一个新的布局时，必须为新的布局创建一个 binding。因此， ViewStubProxy 必须监听 ViewStub 的 ViewStub.OnInflateListener，并及时建立 binding。由于 ViewStub 只能有一个 OnInflateListener，你可以将你自己的 listener 设置在 ViewStubProxy 上，在 binding 建立之后， listener 就会被触发。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">    &lt;LinearLayout ...&gt;</div><div class="line">        &lt;ViewStub</div><div class="line">            android:id=<span class="string">"@+id/view_stub"</span></div><div class="line">            android:layout=<span class="string">"@layout/include"</span></div><div class="line">            ... /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<p>在 Java 代码中获取 binding 实例，为 ViewStubProy 注册 ViewStub.OnInflateListener 事件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mActivityViewStubBinding = DataBindingUtil.setContentView(this, R.layout.activity_view_stub);</div><div class="line">mActivityViewStubBinding.viewStub.setOnInflateListener(new ViewStub.<span class="function"><span class="title">OnInflateListener</span></span>() &#123;</div><div class="line">    @Override</div><div class="line">    public void onInflate(ViewStub stub, View inflated) &#123;</div><div class="line">        IncludeBinding viewStubBinding = DataBindingUtil.bind(inflated);</div><div class="line">        User user = new User(<span class="string">"Connor"</span>, <span class="string">"Lin"</span>, 28);</div><div class="line">        viewStubBinding.setUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过 ViewStubProxy 来 inflate ViewStub :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void inflate(View view) &#123;</div><div class="line">    <span class="keyword">if</span> (!mActivityViewStubBinding.viewStub.isInflated()) &#123;</div><div class="line">        mActivityViewStubBinding.viewStub.getViewStub().inflate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处 isInflated() 和 getViewStub() 会标红，请不要担心，这并不是错误，是 ViewStubProxy 中的方法。</p>
<h2 id="高级绑定"><a href="#高级绑定" class="headerlink" title="高级绑定"></a>高级绑定</h2><p>动态变量</p>
<p>有时候，有一些不可知的 binding 类。例如，RecyclerView.Adapter 可以用来处理不同布局，这样的话它就不知道应该使用哪一个 binding 类。而在 onBindViewHolder(VH, int) ) 的时候，binding 类必须被赋值。</p>
<p>在这种情况下，RecyclerView 的布局内置了一个 item 变量。 BindingHolder 有一个 getBinding 方法，返回一个 ViewDataBinding 基类。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void onBindViewHolder(BindingHolder holder, int position) &#123;</div><div class="line">  holder.getBinding().setVariable(BR.item, mItemList.get(position));</div><div class="line">  holder.getBinding().executePendingBindings();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上，详细请参考 DataBindingDemo -&gt; MainActivity 部分(使用 RecyclerView 实现)。</p>
<p>直接 binding</p>
<p>当变量或者 observable 发生变动时，会在下一帧触发 binding。有时候 binding 需要马上执行，这时候可以使用 executePendingBindings()。</p>
<p>后台线程</p>
<p>只要数据不是容器类，你可以直接在后台线程做数据变动。Data binding 会将变量/字段转为局部量，避免同步问题。</p>
<h1 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h1><p>本部分源码请参考 DataBindingDemo -&gt; AttributeSettersActivity 部分。</p>
<p>当绑定数据发生变动时，生成的 binding 类必须根据 binding 表达式调用 View 的 setter 函数。Data binding 框架内置了几种自定义赋值的方法。</p>
<h2 id="自动设置属性"><a href="#自动设置属性" class="headerlink" title="自动设置属性"></a>自动设置属性</h2><p>对一个 attribute 来说，Data Binding 会尝试寻找对应的 setAttribute 函数。属性的命名空间不会对这个过程产生影响，只有属性的命名才是决定因素。</p>
<p>举个例子，针对一个与 TextView 的 android:text 绑定的表达式，Data Binding会自动寻找 setText(String) 函数。如果表达式返回值为 int 类型， Data Binding则会寻找 setText(int) 函数。所以需要小心处理函数的返回值类型，必要的时候使用强制类型转换。</p>
<p>需要注意的是，Data Binding 在对应名称的属性不存在的时候也能继续工作。你可以轻而易举地使用 Data Binding 为任何 setter “创建” 属性。<br>如 DataBindingDemo 中的自定义布局 Card，并没有添加 declare-styleable，但是可以使用自动 setter 的特性来调用这些函数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;com.connorlin.databinding.view.Card</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    app:object=<span class="string">"@&#123;user&#125;"</span>/&gt;</div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## 重命名属性设置</span></div><div class="line"></div><div class="line">一些属性的命名与 setter 不对应。针对这些函数，可以用 BindingMethods 注解来将属性与 setter 绑定在一起。举个例子， android:tint 属性可以这样与 <span class="built_in">set</span>ImageTintList(ColorStateList) ) 绑定，而不是 <span class="built_in">set</span>Tint :</div><div class="line"></div><div class="line">``` bash</div><div class="line">@BindingMethods(&#123;</div><div class="line">      @BindingMethod(<span class="built_in">type</span> = <span class="string">"android.widget.ImageView"</span>,</div><div class="line">                      attribute = <span class="string">"android:tint"</span>,</div><div class="line">                      method = <span class="string">"setImageTintList"</span>),</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Android 框架中的 setter 重命名已经在库中实现了，我们只需要专注于自己的 setter。</p>
<h2 id="自定义属性设置"><a href="#自定义属性设置" class="headerlink" title="自定义属性设置"></a>自定义属性设置</h2><p>一些属性需要自定义 setter 逻辑。例如，目前没有与 android:paddingLeft 对应的 setter，只有一个 setPadding(left, top, right, bottom) 函数。结合静态 binding adapter 函数与 BindingAdapter 注解可以让开发者自定义属性 setter。</p>
<p>Android 属性已经内置一些 BindingAdapter。例如，这是一个 paddingLeft 的自定义 setter：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@BindingAdapter(<span class="string">"android:paddingLeft"</span>)</div><div class="line">public static void <span class="built_in">set</span>PaddingLeft(View view, int padding) &#123;</div><div class="line">  view.setPadding(padding,</div><div class="line">                  view.getPaddingTop(),</div><div class="line">                  view.getPaddingRight(),</div><div class="line">                  view.getPaddingBottom());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Binding adapter 在其他自定义类型上也很好用。举个例子，一个 loader 可以在非主线程加载图片。</p>
<p>当存在冲突时，开发者创建的 binding adapter 会覆盖 Data Binding 的默认 adapter。</p>
<p>你也可以创建多个参数的 adapter：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 无需手动调用此函数</div><div class="line">@BindingAdapter(&#123;<span class="string">"imageUrl"</span>, <span class="string">"error"</span>&#125;)</div><div class="line">public static void loadImage(ImageView view, String url, Drawable error) &#123;</div><div class="line">    Glide.with(view.getContext()).load(url).error(error).into(view);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 当url存在时，会自动调用注解方法，即loadImage()--&gt;</div><div class="line">&lt;ImageView </div><div class="line">    app:imageUrl=“@&#123;url&#125;”</div><div class="line">    app:error=“@&#123;@drawable/ic_launcher&#125;”/&gt;</div></pre></td></tr></table></figure>
<p>当 imageUrl 与 error 存在时这个 adapter 会被调用。imageUrl 是一个 String，error 是一个 Drawable。</p>
<p>在匹配时自定义命名空间会被忽略<br>你可以为 android 命名空间编写 adapter<br>Binding adapter 方法可以获取旧的赋值。只需要将旧值放置在前，新值放置在后：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@BindingAdapter(<span class="string">"android:paddingLeft"</span>)</div><div class="line">public static void <span class="built_in">set</span>PaddingLeft(View view, int oldPadding, int newPadding) &#123;</div><div class="line">  <span class="keyword">if</span> (oldPadding != newPadding) &#123;</div><div class="line">      view.setPadding(newPadding,</div><div class="line">                      view.getPaddingTop(),</div><div class="line">                      view.getPaddingRight(),</div><div class="line">                      view.getPaddingBottom());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件 handlers 仅可用于只拥有一个抽象方法的接口或者抽象类。例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@BindingAdapter(<span class="string">"android:onLayoutChange"</span>)</div><div class="line">public static void <span class="built_in">set</span>OnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,</div><div class="line">      View.OnLayoutChangeListener newValue) &#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">        <span class="keyword">if</span> (oldValue != null) &#123;</div><div class="line">            view.removeOnLayoutChangeListener(oldValue);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newValue != null) &#123;</div><div class="line">            view.addOnLayoutChangeListener(newValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 listener 内置多个函数时，必须分割成多个 listener。例如， View.OnAttachStateChangeListener 内置两个函数： onViewAttachedToWindow()与 onViewDetachedFromWindow() 。在这里必须为两个不同的属性创建不同的接口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line">public interface OnViewDetachedFromWindow &#123;</div><div class="line">    void onViewDetachedFromWindow(View v);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line">public interface OnViewAttachedToWindow &#123;</div><div class="line">    void onViewAttachedToWindow(View v);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为改变一个 listener 会影响到另外一个，我们必须编写三个不同的 adapter，包括修改一个属性的和修改两个属性的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@BindingAdapter(<span class="string">"android:onViewAttachedToWindow"</span>)</div><div class="line">public static void <span class="built_in">set</span>Listener(View view, OnViewAttachedToWindow attached) &#123;</div><div class="line">    <span class="built_in">set</span>Listener(view, null, attached);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@BindingAdapter(<span class="string">"android:onViewDetachedFromWindow"</span>)</div><div class="line">public static void <span class="built_in">set</span>Listener(View view, OnViewDetachedFromWindow detached) &#123;</div><div class="line">    <span class="built_in">set</span>Listener(view, detached, null);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@BindingAdapter(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</div><div class="line">public static void <span class="built_in">set</span>Listener(View view, final OnViewDetachedFromWindow detach,</div><div class="line">        final OnViewAttachedToWindow attach) &#123;</div><div class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">        final OnAttachStateChangeListener newListener;</div><div class="line">        <span class="keyword">if</span> (detach == null &amp;&amp; attach == null) &#123;</div><div class="line">            newListener = null;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newListener = new <span class="function"><span class="title">OnAttachStateChangeListener</span></span>() &#123;</div><div class="line">                @Override</div><div class="line">                public void onViewAttachedToWindow(View v) &#123;</div><div class="line">                    <span class="keyword">if</span> (attach != null) &#123;</div><div class="line">                        attach.onViewAttachedToWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void onViewDetachedFromWindow(View v) &#123;</div><div class="line">                    <span class="keyword">if</span> (detach != null) &#123;</div><div class="line">                        detach.onViewDetachedFromWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class="line">                newListener, R.id.onAttachStateChangeListener);</div><div class="line">        <span class="keyword">if</span> (oldListener != null) &#123;</div><div class="line">            view.removeOnAttachStateChangeListener(oldListener);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newListener != null) &#123;</div><div class="line">            view.addOnAttachStateChangeListener(newListener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子比普通情况下复杂，因为 View 是 add/remove View.OnAttachStateChangeListener 而不是 set。 android.databinding.adapters.ListenerUtil可以用来辅助跟踪旧的 listener 并移除它。</p>
<p>对应 addOnAttachStateChangeListener(View.OnAttachStateChangeListener) )支持的 api 版本，<br>通过向 OnViewDetachedFromWindow 和 OnViewAttachedToWindow 添加 @TargetApi(VERSION_CODES.HONEYCHOMB_MR1) 注解，<br>Data Binding 代码生成器会知道这些 listener 只会在 Honeycomb MR1 或更新的设备上使用。</p>
<h1 id="转换器Converters"><a href="#转换器Converters" class="headerlink" title="转换器Converters"></a>转换器Converters</h1><p>对象转换</p>
<p>当 binding 表达式返回对象时，会选择一个 setter（自动 Setter，重命名 Setter，自定义 Setter），将返回对象强制转换成 setter 需要的类型。</p>
<p>下面是一个使用 ObservableMap 保存数据的例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">  android:text=<span class="string">'@&#123;userMap["lastName"]&#125;'</span></div><div class="line">  android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">  android:layout_height=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在这里， userMap 会返回 Object 类型的值，而返回值会被自动转换成 setText(CharSequence) 需要的类型。当对参数类型存在疑惑时，开发者需要手动做类型转换。</p>
<h1 id="自定义转换"><a href="#自定义转换" class="headerlink" title="自定义转换"></a>自定义转换</h1><p>有时候会自动在特定类型直接做类型转换。例如，当设置背景的时候：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">  android:background=<span class="string">"@&#123;isError.get() ? @color/colorAccent : @color/colorPrimary&#125;"</span></div><div class="line">  android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">  android:layout_height=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在这里，背景需要的是 Drawable ，但是 color 是一个整数。当需要 Drawable 却返回了一个整数时， int 会自动转换成 ColorDrawable 。这个转换是在一个 BindingConversation 注解的静态函数中实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@BindingConversion</div><div class="line">public static ColorDrawable convertColorToDrawable(int color) &#123; </div><div class="line">    <span class="built_in">return</span> new ColorDrawable(color); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，这个转换只能在 setter 阶段生效，所以 不允许 混合类型：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">  android:background=<span class="string">"@&#123;isError.get() ? @drawable/error : @color/colorPrimary&#125;"</span></div><div class="line">  android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">  android:layout_height=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>Android Studio对Data Binding的支持<br>Android Studio 支持 Data Binding 表现为：</p>
<p>语法高亮<br>标记表达式语法错误<br>XML 代码补全<br>跳转到声明或快速文档<br>注意：数组和泛型类型，如 Observable 类，当没有错误时可能会显示错误。</p>
<p>在预览窗口可显示 Data Binding 表达式的默认值。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">"@&#123;user.firstName, default=FirstName&#125;"</span>/&gt;</div><div class="line">  &lt;!-- TextView 的 text 默认值为 FirstName --&gt;</div></pre></td></tr></table></figure></p>
<p>如果你需要在设计阶段显示默认值，你可以使用 tools 属性代替默认值表达式，详见 设计阶段布局属性</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git的使用]]></title>
      <url>http://windback.xyz/2016/12/16/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Git连接github的详细使用"><a href="#Git连接github的详细使用" class="headerlink" title="Git连接github的详细使用"></a>Git连接github的详细使用</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>[git下载地址]： <a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a></p>
<p>当安装完git后，打开Git Bash客户端；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-204f665cde76e672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="配置和使用Github"><a href="#配置和使用Github" class="headerlink" title="配置和使用Github"></a>配置和使用Github</h3><h4 id="1-检查SSH-keys的设置"><a href="#1-检查SSH-keys的设置" class="headerlink" title="1.检查SSH keys的设置"></a>1.检查SSH keys的设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//检查本机的ssh密钥</div><div class="line">$ <span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure>
<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<h4 id="2-生成新的SSH-Key："><a href="#2-生成新的SSH-Key：" class="headerlink" title="2.生成新的SSH Key："></a>2.生成新的SSH Key：</h4><p>输入以下命令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址 "</span></div></pre></td></tr></table></figure></p>
<p>Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</p>
<p><strong>注意:</strong><br>    ①此处的邮箱地址，你可以输入自己的邮箱地址（你注册Github时候的邮箱）；<br>    ②此处的「-C」的是大写的C<br>然后系统会要你输入密码：<br>    Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>    Enter same passphrase again:&lt;再次输入加密串&gt;<br>此时直接输入密码就，输入完按回车，（密码字符不会显示*）</p>
<p>最后出现一个图是 方块并且里面有很多各种各样的符号分布即为成功设置ssh key了。</p>
<h4 id="3-添加SSH-Key到GitHub"><a href="#3-添加SSH-Key到GitHub" class="headerlink" title="3.添加SSH Key到GitHub"></a>3.添加SSH Key到GitHub</h4><p> 打开你的电脑 C:\Users\你电脑的 用户名.ssh文件 加即可看到生成的私人密钥。(若找不到.ssh文件，请设置显示隐藏文件)。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-19f4257756180543.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>登陆github系统。点击右上角的 头像 弹出菜单中 选择 Settings</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-7f282526f1c33315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>点击右侧 SSH and GPG  keys<br><img src="http://upload-images.jianshu.io/upload_images/3867823-c9f8953525757dd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>点击New  SSH key：添加一个title（自己定义），在key中填写C:\Users\你电脑的 用户名.ssh\id_rsa.pub文件中的密钥，点击Add SSH key即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3867823-4248a2c48255f441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###测试<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果命令行反馈为：<br>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?<br>不要紧张，输入yes就好，然后会看到：<br>Hi cnfeat! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//用户名 </div><div class="line">$ git config --global user.name <span class="string">"cnfeat"</span></div><div class="line">//填写自己的邮箱(一个可用的邮箱即可，不一定非要github的注册邮箱)</div><div class="line">$ git config --global user.email <span class="string">"cnfeat@gmail.com"</span></div></pre></td></tr></table></figure></p>
<h2 id="Git命令行的详细使用"><a href="#Git命令行的详细使用" class="headerlink" title="Git命令行的详细使用"></a>Git命令行的详细使用</h2><h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git  常用命令"></a>Git  常用命令</h3><h4 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1.git init"></a>1.<strong>git init</strong></h4><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>
<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p>
<p><em>使用方法 ：</em><br>  在需要 生成仓库的文件夹右击选择 <strong>Git Bash Here</strong>，在命令行中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">``` </div><div class="line"></div><div class="line">该命令执行完后会在当前目录生成一个 .git 目录。</div><div class="line">使用我们指定目录作为Git仓库。</div><div class="line"></div><div class="line"><span class="comment">#### 2.**git clone**</span></div><div class="line">我们使用 **git <span class="built_in">clone</span>** 从现有 Git 仓库中拷贝项目</div><div class="line"></div><div class="line">*使用方法：*</div><div class="line">克隆远程仓库到本目录下的</div><div class="line">``` bash</div><div class="line">$ git <span class="built_in">clone</span> &lt;repo&gt;</div></pre></td></tr></table></figure></p>
<p>克隆远程仓库到指定目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure></p>
<p>注：<br>  <strong>repo:</strong>Git 仓库。<br>  <strong>directory:</strong>本地目录。<br>  <strong>&lt;&gt;为标注、实际情况不带,以下情况均是&lt;&gt;</strong></p>
<p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:wangsijie0415:CarSeatTable-master.git</div></pre></td></tr></table></figure></p>
<h4 id="3-git-add"><a href="#3-git-add" class="headerlink" title="3.git add"></a>3.<strong>git add</strong></h4><p>我们可以使用 <strong> git add .</strong> 命令来添加当前项目的所有文件到缓存区<br>添加个别文件则<strong> git add  xxx.文件后缀</strong> 多个文件可用 “空格” 隔开.</p>
<p><em>使用方法：</em><br>添加多个文件至缓存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add &lt;文件.文件后缀&gt; &lt;文件.文件后缀&gt;</div></pre></td></tr></table></figure></p>
<p>添加本目录全部文件到缓存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">//或者</div><div class="line">$ git add -A</div></pre></td></tr></table></figure></p>
<h4 id="4-git-commit"><a href="#4-git-commit" class="headerlink" title="4.git commit"></a>4.<strong>git commit</strong></h4><p>使用 <strong>git add </strong>命令将想要快照的内容写入缓存区， 而执行 <strong>git commit </strong>将缓存区内容添加到本地仓库中。</p>
<p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 <strong>git commit -a </strong>选项跳过这一步</p>
<p><em>使用方法：</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit</div></pre></td></tr></table></figure></p>
<p>带消息的提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$  git commit -m <span class="string">"需要提交的信息"</span></div><div class="line">``` </div><div class="line">合并add 和 commit 步骤：</div><div class="line"></div><div class="line">``` bash</div><div class="line">$ git commit <span class="_">-a</span> </div><div class="line">//带提交信息的</div><div class="line">$ git commit -am <span class="string">''</span>需要提交的信息<span class="string">"</span></div></pre></td></tr></table></figure></p>
<h4 id="5-git-pull"><a href="#5-git-pull" class="headerlink" title="5.git pull"></a>5.<strong>git pull</strong></h4><p>更新远程仓库到本地，若已在本地仓库，在我们提交更改之前，在团队开发的过程中我们应保证代码的一致性，所以在提交前我们应该先将远程仓库的代码使用<strong>git pull</strong>更新下来。<br><em>使用方法：</em><br>取回远程主机某个分支的更新，再与本地的指定分支合并。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div></pre></td></tr></table></figure></p>
<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull  &lt;远程主机名&gt; &lt;远程分支名&gt;</div></pre></td></tr></table></figure></p>
<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin</div></pre></td></tr></table></figure></p>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<h4 id="6-git-push"><a href="#6-git-push" class="headerlink" title="6.git push"></a>6.<strong>git push</strong></h4><p>用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<p><em>使用方法：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div></pre></td></tr></table></figure>
<p>注意：分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<h3 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git  分支管理"></a>Git  分支管理</h3><h4 id="0-列出-所有分支"><a href="#0-列出-所有分支" class="headerlink" title="0.列出 所有分支"></a>0.列出 所有分支</h4><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<h4 id="1-新建本地分支"><a href="#1-新建本地分支" class="headerlink" title="1.新建本地分支"></a>1.新建本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="2-切换本地分支"><a href="#2-切换本地分支" class="headerlink" title="2.切换本地分支"></a>2.切换本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge</div></pre></td></tr></table></figure>
<h4 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4.删除分支"></a>4.删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="5-创建并切换分支"><a href="#5-创建并切换分支" class="headerlink" title="5.创建并切换分支"></a>5.创建并切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b &lt;branchname&gt;</div></pre></td></tr></table></figure>
<h4 id="6-推送分支到远程仓库"><a href="#6-推送分支到远程仓库" class="headerlink" title="6.推送分支到远程仓库"></a>6.推送分支到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin local_branch:remote_branch</div></pre></td></tr></table></figure>
<p>注：<br>local_branch必须为你本地存在的分支，remote_branch为远程分支，如果remote_branch不存在则会自动创建分支。</p>
<h4 id="7-删除远程分支"><a href="#7-删除远程分支" class="headerlink" title="7.删除远程分支"></a>7.删除远程分支</h4><p>即把local_branch留空则是删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :remote_branch</div></pre></td></tr></table></figure></p>
<h4 id="8-创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔"><a href="#8-创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔" class="headerlink" title="8.创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)"></a>8.创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//创建一个branchname的分支 --orphan指的是你执行git checkout命令时的那个分支，当然新的分支不会指向任何以前的提交。</div><div class="line">$ git checkout --orphan &lt;branchname&gt;</div><div class="line">//把当前内容全部删除</div><div class="line">$ git rm -rf .</div><div class="line">//使用commit命令来提交空分支</div><div class="line">$ git commit -am <span class="string">"消息"</span></div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://windback.xyz/2016/12/13/hello-world/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</the></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
